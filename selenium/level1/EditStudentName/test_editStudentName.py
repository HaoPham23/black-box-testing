# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestEditStudentName():
  def setup_method(self, method):
    options = webdriver.ChromeOptions()
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  
  def test_eSN(self, last_name, first_name,  error_lastname, error_firstname):
    try:
        # Mở trang và đăng nhập
        self.driver.get("https://school.moodledemo.net/?lang=vi")
        self.driver.set_window_size(838, 816)
        self.driver.find_element(By.LINK_TEXT, "Đăng nhập").click()
        self.driver.find_element(By.ID, "username").send_keys("student")
        self.driver.find_element(By.ID, "password").send_keys("moodle2024")
        self.driver.find_element(By.ID, "loginbtn").click()

        # Vào Hồ sơ và chỉnh sửa
        self.driver.find_element(By.ID, "user-menu-toggle").click()
        self.driver.find_element(By.LINK_TEXT, "Hồ sơ").click()
        self.driver.find_element(By.LINK_TEXT, "Sửa hồ sơ cá nhân").click()

        # Điền thông tin
        self.driver.find_element(By.ID, "id_firstname").clear()
        self.driver.find_element(By.ID, "id_firstname").send_keys(first_name)
        self.driver.find_element(By.ID, "id_lastname").clear()
        self.driver.find_element(By.ID, "id_lastname").send_keys(last_name)
        self.driver.find_element(By.ID, "id_submitbutton").click()
        time.sleep(1)

        # Kiểm tra lỗi
        if (first_name == ""):
          firstname_error = self.driver.find_element(By.ID, "id_error_firstname").text
          assert firstname_error == error_firstname, f"Expected: {error_firstname}, Got: {firstname_error}"
        if (last_name == ""):
          lastname_error = self.driver.find_element(By.ID, "id_error_lastname").text
          assert lastname_error == error_lastname, f"Expected: {error_lastname}, Got: {lastname_error}"
        if (first_name != "" and last_name != ""):
          full_name = self.driver.find_element(By.CSS_SELECTOR, ".h2").text
          actual_full_name = first_name + " " + last_name
          assert full_name == actual_full_name, f"Expectide: {actual_full_name}, Got: {full_name}"
        # Nếu các kiểm tra đều thành công
        print(f"Test case with first_name='{first_name}' and last_name='{last_name}' -> PASS")
    
    except AssertionError as e:
        print(f"Test case with first_name='{first_name}' and last_name='{last_name}' -> FAIL: {str(e)}")
    
    except Exception as e:
        print(f"Test case with first_name='{first_name}' and last_name='{last_name}' -> ERROR: {str(e)}")
    
    finally:
        try:
            self.driver.find_element(By.CSS_SELECTOR, ".avatar").click()
            self.driver.find_element(By.LINK_TEXT, "Thoát").click()
        except:
            print("Could not log out properly.")
  
 
def load_test_data(json_file):
    with open(json_file, "r", encoding="utf-8") as file:
        return json.load(file)




if __name__ == "__main__":
    test_data = load_test_data('input_editStudentName.json')
    for case in test_data:
        last_name = case["last_name"]
        first_name = case["first_name"]
        error_firstname = case["error_firstname"]
        error_lastname = case["error_lastname"]


        test_instance = TestEditStudentName()
        test_instance.setup_method(None)

        try:
            test_instance.test_eSN(last_name, first_name, error_lastname, error_firstname)
        finally:
            test_instance.teardown_method(None)