# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestFindCourse():
  def setup_method(self, method):
    options = webdriver.ChromeOptions()
    options.add_experimental_option('excludeSwitches', ['enable-logging'])
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  def are_lists_equal(self, list1, list2):
    return sorted(list1) == sorted(list2)
  
  def test_fC1(self, str_, list_course):
    try:
      self.driver.get("https://school.moodledemo.net/?lang=vi")
      self.driver.set_window_size(838, 816)
      element = self.driver.find_element(By.LINK_TEXT, "Đăng nhập")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      self.driver.find_element(By.LINK_TEXT, "Đăng nhập").click()
      self.driver.find_element(By.ID, "username").click()
      self.driver.find_element(By.ID, "username").send_keys("student")
      self.driver.find_element(By.ID, "password").click()
      self.driver.find_element(By.ID, "password").send_keys("moodle2024")
      self.driver.find_element(By.ID, "loginbtn").click()
      time.sleep(2)
      self.driver.find_element(By.ID, "groupingdropdown").click()
      self.driver.find_element(By.CSS_SELECTOR, "a[data-value='all']").click()
      time.sleep(2)
      self.driver.find_element(By.XPATH, "//button[@type='button' and @data-action='limit-toggle']").click()
      self.driver.find_element(By.LINK_TEXT, "Tất cả").click()
      self.driver.find_element(By.CSS_SELECTOR, "input[data-region='input'][data-action='search']").send_keys(str_)
      time.sleep(5)
      span_elements = self.driver.find_elements(By.XPATH, "//span[contains(@class, 'multiline')]//span[@class='sr-only']")
      span_texts = [span.text for span in span_elements]
      assert self.are_lists_equal(span_texts, list_course) == True
      print(f"Test case with string search='{str_}' -> PASS")
    except AssertionError as e:
      print(f"Test case with string search='{str_}' -> FAIL: {str(e), span_texts}")
    finally:
        try:
            self.driver.find_element(By.CSS_SELECTOR, ".avatar").click()
            self.driver.find_element(By.LINK_TEXT, "Thoát").click()
        except:
            print("Could not log out properly.")
    
  


if __name__ == "__main__":
    with open("input_findCourse.json", "r") as f:
        test_cases = json.load(f)

    test_instance = TestFindCourse()

    for test_case in test_cases:
        test_instance.setup_method(None)
        search_str = test_case["str"]
        list_course = test_case["list_course"]
        print(f"Running test with search_str: {search_str}")
        try:
            test_instance.test_fC1(search_str, list_course)
        finally:
            test_instance.teardown_method(None)

    